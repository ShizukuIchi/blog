{"data":{"site":{"siteMetadata":{"title":"網頁小筆記","author":"Shizuku"}},"markdownRemark":{"id":"94a92317-7c58-523c-9c66-1f6ff30bf740","excerpt":"Git 就是 Coding 界的時光機、抓戰犯利器。 概念介紹 Git 的主要功能就是紀錄專案的 版本 ，假設一開始寫完的程式碼是第一版，之後每次修改時就可以更新版本，版本間可也以自由切換。 開始前請先安裝  Git 。 前置動作 先建立一個新的專案資料夾，假設叫做  \n 進入資料夾 後開啟 Terminal…","html":"<blockquote>\n<p>Git 就是 Coding 界的時光機、抓戰犯利器。</p>\n</blockquote>\n<h2>概念介紹</h2>\n<p>Git 的主要功能就是紀錄專案的<strong>版本</strong>，假設一開始寫完的程式碼是第一版，之後每次修改時就可以更新版本，版本間可也以自由切換。</p>\n<p>開始前請先安裝 <a href=\"https://git-scm.com/downloads\">Git</a>。</p>\n<h2>前置動作</h2>\n<p>先建立一個新的專案資料夾，假設叫做 <code class=\"language-text\">learn-git</code>\n<strong>進入資料夾</strong>後開啟 Terminal 並輸入 <code class=\"language-text\">git init</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ mkdir learn-git          # 建立資料夾\n$ cd learn-git             # 進入資料夾\n$ git init                 # 對這個資料夾開始版控\nInitialized empty Git repository in .../learn-git/.git/</code></pre></div>\n<p>此時專案中多了一個隱藏資料夾 <code class=\"language-text\">.git</code> ，它就是 git 版本資訊儲存的地方，接下來先隨便新增一個檔案叫 <code class=\"language-text\">a.txt</code>，並在裡頭隨意輸入一些文字。</p>\n<p>回到 Terminal 並輸入萬用指令 <code class=\"language-text\">git status</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git status\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)\n\n        a.txt\n\nnothing added to commit but untracked files present (use &quot;git add&quot; to track)</code></pre></div>\n<p>Terminal 會出現一些文字，代表當前的 Git 狀態以及提示，不確定要輸入什麼指令時就可以試試看 <code class=\"language-text\">git status</code>，可以解決大部分的問題。</p>\n<h2>版控開始</h2>\n<ul>\n<li>\n<p>git add 追蹤檔案</p>\n<p>從 <code class=\"language-text\">git status</code> 的提示中得知 <code class=\"language-text\">a.txt</code> 這個檔案尚未被追蹤，<code class=\"language-text\">git add &lt;file&gt;...</code> 指令能將檔案的變動加入暫存區，沒有被加入的檔案變動就不會被存入新版本。</p>\n</li>\n</ul>\n<p>輸入 <code class=\"language-text\">git add a.txt</code> 還有 <code class=\"language-text\">git status</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git add a.txt\n$ git status\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)\n\n        new file:   a.txt</code></pre></div>\n<p>翻成中文就是：暫存區有變動待確認，而且可以輸入<code class=\"language-text\">git rm --cached a.txt</code> 把上次 <code class=\"language-text\">a.txt</code> 的變動從暫存區移除。</p>\n<ul>\n<li>\n<p>git commit 儲存變動（改版）</p>\n<p>用 commit 來確認並儲存變動，也就是更新專案版本，存檔的同時要附上一個訊息，以便之後辨識版本資訊。</p>\n<p>輸入 <code class=\"language-text\">git commit -m &quot;&lt;你的改版訊息&gt;&quot;</code>，<code class=\"language-text\">-m</code> 是 message 的縮寫</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git commit -m &quot;新增 a.txt&quot;\n[master (root-commit) 89aecbd] 新增 a.txt\n 1 file changed, 1 insertions(+), 0 deletions(-)\n create mode 100644 a.txt</code></pre></div>\n<p>翻譯蒟蒻：<br>\n總共 1 個檔案改變了，新增 1 行，刪除 0 行<br>\n建立 a.txt 檔案</p>\n<p>再輸入一次 <code class=\"language-text\">git status</code> 就會提示沒東西待確認，很乾淨</p>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre class=\"language-zsh\"><code class=\"language-zsh\">$ git status\nOn branch master\nnothing to commit, working tree clean</code></pre></div>\n<p>注意：經過改動並輸入 <code class=\"language-text\">git add</code> 後，若再繼續改動的話就要再輸入一次 <code class=\"language-text\">git add</code> 把最新一次的改動也放入暫存區， <code class=\"language-text\">git commit</code> 只會把暫存區的內容加入新版本。</p>\n<h2>本地和遠端 Repository</h2>\n<p>Repository 就是掌管程式碼以及版本資訊的倉庫，但真的很難翻，之後就直接叫 repo。</p>\n<p>目前為止的步驟都是在本地進行，也就是改變本地 repo 的版本，但雲端也可以存放 repo，在合作、複製他人程式碼、換電腦的時候就很方便。</p>\n<p>目前最大的雲端 repo 儲存空間就是 <a href=\"https://github.com/\">Github</a> ，趕緊建立帳號吧。</p>\n<h3>建立 repo</h3>\n<p>註冊完帳號後找到 <code class=\"language-text\">New repository</code> 的選項，隨意取個名字如 <code class=\"language-text\">first-repo</code>，然後按最下面的 Create repository。</p>\n<p>這時候會出現一堆指令，當你想要創建一個全新的 repo 且還沒有任何程式碼的時候，就使用上方區塊的指令，剛才已經做過前五行的動作，注意最下方的兩行：</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">echo</span> <span class=\"token string\">\"# first-repo\"</span> <span class=\"token operator\">>></span> README.md     <span class=\"token comment\"># 建立一個新檔案並寫入 # first-repo</span>\n<span class=\"token function\">git</span> init                             <span class=\"token comment\"># 開始版本控制</span>\n<span class=\"token function\">git</span> add README.md                    <span class=\"token comment\"># 將變動放入暫存區</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"first commit\"</span>         <span class=\"token comment\"># 確認改動並更新本地 repo 的版本</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token function\">git</span> remote add origin git@github.com:ShizukuIchi/first-repo.git</span><span class=\"gatsby-highlight-code-line\"><span class=\"token function\">git</span> push -u origin master</span></code></pre></div>\n<blockquote>\n<p>git remote add [-u] &#x3C;remote<em>name> &#x3C;repository</em>url></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">`push` 更新數據庫的資訊，丟到雲端中大家都看的見，須附上數據庫還有分支的名稱。</code></pre></div>\n<blockquote>\n<p>git push &#x3C;remote<em>name> &#x3C;branch</em>name></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">### 其他 Git 指令\n\n跟別人合作時，夥伴將程式碼 push 到數據庫後，可以用 `pull`取出最新版本的 code，每次開始 coding 前，都要記得 pull 一下，保持同步。</code></pre></div>\n<blockquote>\n<p>git pull &#x3C;remote<em>name> &#x3C;branch</em>name></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">`reset` 可以讓時光回流，主要有 `-soft`、`-mixed`、`-hard` 三種參數，一旦使用 `reset`，版本便一去不復返，只是程度的區別。  \n`-soft` ~~就是說話不算話~~，會取消 `commit`，讓變動確認失效，不影響程式碼和想要更改的部分。</code></pre></div>\n<blockquote>\n<p>git reset -soft <version></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">`-mixed` ~~就如失憶~~，會取消 `add` ，讓 git 不記得有這個改動，但不會更改程式碼，若不加參數就會是以此方式進行重設。</code></pre></div>\n<blockquote>\n<p>git reset <version></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">`-hard` 會直接乘著時光機到指定版本，再當次版本之後的改動都會消失殆盡，謹慎服用。</code></pre></div>\n<blockquote>\n<p>git reset -hard <version></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git 版本的表示方法如下 :\n\n- `HEAD` 當前版本\n- `HEAD^` 前 1 版本\n- `HEAD~2` 前 2 版本\n- `HEAD~X` 前 X 版本\n\n`stash` 指令的功能和 `reset` 有些類似，但它是讓尚未確認的更動儲存起來，並回到當前版本的樣子，方便開啟新分支進行其他改動。</code></pre></div>\n<blockquote>\n<p>git stash\ngit stash pop   // get stash content</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">`diff` 可以用來比較兩個本版的區別</code></pre></div>\n<blockquote>\n<p>git diff <version1> <version2></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">`log` 可以查看 git 的歷史以及版本號</code></pre></div>\n<blockquote>\n<p>git log</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">若要回復單一檔案至某版本，可以這樣輸入：</code></pre></div>\n<blockquote>\n<p>git checkout <version> &#x3C;file_path></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","frontmatter":{"title":"Git 版本控制","date":"March 14, 2019","description":"還在用截圖、USB 傳程式碼嗎？別鬧了","difficulty":"入門"}}},"pageContext":{"slug":"/git/","previous":{"fields":{"slug":"/react/"},"frontmatter":{"title":"React 快速上手"}},"next":null}}
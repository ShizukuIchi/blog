{"data":{"site":{"siteMetadata":{"title":"網頁小筆記","author":"Shizuku"}},"markdownRemark":{"id":"528bc8e3-88bf-5c1b-b946-afeadd9dc441","excerpt":"近年來前端開發框架漸漸從 JQuery 變為 Angular、Vue、React，JQuery 為何被取代呢？ React 介紹 有別於 JQuery 將邏輯和介面寫在一塊命令式語法，React…","html":"<p>近年來前端開發框架漸漸從 JQuery 變為 Angular、Vue、React，JQuery 為何被取代呢？</p>\n<h2>React 介紹</h2>\n<p>有別於 JQuery 將邏輯和介面寫在一塊命令式語法，React 是宣告式，將畫面呈現 (排版) 和 資料 (狀態) 分開，先定義好介面如何呈現，再將資料灌進去，每當資料改變就進行畫面重繪。</p>\n<p>假設有幾個按鈕，可以改變文字的樣式：</p>\n<style>\n  .bold ~ .text {\n    font-weight: bold;\n  }\n  .italic>input:checked ~ .text {\n    font-style: italic;\n  }\n  .\n</style>\n<div class=\"buttons\">123\n  <label for=\"cheese\">Do you like cheese?</label>\n    <input type=\"checkbox\" name=\"cheese\" id=\"cheese\">\n  <label class=\"italic\">\n    <input type=\"checkbox\">\n    <button>123</button>\n  </label>\n  <span class=\"text\">Hello World!</span>\n</div>\n另外 React 的狀態是無法直接更改的，需要透過 setState 以新狀態取代舊狀態，這跟 Pure function、Immutable 大大關聯，讓更動後的狀態能被預期，可以保存舊狀態 ( Debug )、提升效能 ( Pure Component )。\n<p>延伸閱讀：Virtual DOM、Component Lifecycle</p>\n<p>語法介紹\n我想在網頁上放個 Hello World…</p>\n<div>Hello World!</div>\n轉換成 React ( 已引入 React、ReactDOM )\n<p>class MyDiv extends React.Component {\nrender() {\nreturn (</p>\n<div>Hello World!</div>\n);\n}\n}\n我們完成了第一個 React component！是不是很簡單呢？\n<p>真的很簡單 (誤</p>\n<p>那要怎麼放進 DOM 裡面呢？ 首先要有個 React 進入點。</p>\n<p>// index.html</p>\n<div id=\"root\"></div>\n執行 ReactDOM.render 並放入兩個參數 ( 根元件 & 進入點 )。\n<p>ReactDOM.render(<MyDiv />, document.querySelector(‘#root’));\n可以注意到 MyDiv 直接使用 Html tag 的語法，其實上方宣告 MyDiv 時裡面也是直接用了 div，這是 React 使用元件的縮寫語法 (JSX)。</p>\n<p>※ React 是以開頭大小寫分辨是否為 Html 既有元件，亂用會直接報錯！</p>\n<p>// Bad\n<myDiv />\n// Good\n<MyDiv /></p>\n<div />\n狀態控制\nReact 的特性：真相只有一個！永遠依據當前 state 執行 render。\n<p>以 setState 改變元件的 state，每當 state 更動時就會觸發 render 重繪。</p>\n<p>class App extends React.Component {\nstate = {\nvalue: ‘Hello World!’,\n};\nchangeState = () => {\nthis.setState({ value: ‘Hello React!’ });\n}\nrender() {\nreturn (</p>\n<div onClick={this.changeState}>{this.state.value}</div>\n);\n}\n}\n// Hello World!\n// click div\n// Hello React!\n※ 請勿直接執行 this.state.value = 'Hello React!';\n<p>資料傳遞\n元件內的狀態叫做 state，來自 parent 的資料叫做 props，傳入新的 props 也會讓 component 重繪。</p>\n<p>class App extends React.Component {\nstate = {\nvalue: ‘Hello World!’,\n};\nchangeState = () => {\nthis.setState({ value: ‘Hello React!’ });\n}\nrender() {\nreturn (</p>\n<div onClick={this.changeState}>\n<HelloText text={this.state.value} />\n</div>\n);\n}\n}\nconst HelloText = (props) => {\nreturn (  \n <div className=\"hello\">{`Hello ${props.text}`}</div>\n);\n}\n// Hello Hello World!\n// click div\n// Hello Hello React!\n※ JSX 語法有幾點要注意：\n<p>Javascript 保留字：\n<label htmlFor=\"username\" className=\"user-name\" /></p>\n<p>inline style 是物件 ( 非必要別寫 inline style )：</p>\n<div style={{ backgroundColor: \"#FFF\", height: \"100px\" }} ></div>\n<p>JSX 裡面的 JS 要包上 {} ：\n<span>{‘I am ’ + x + ’ years old.‘}</span></p>","frontmatter":{"title":"React 快速上手","date":"March 12, 2019","description":"打破成見，React 一點都不難","difficulty":"中階"}}},"pageContext":{"slug":"/react/","previous":{"fields":{"slug":"/js-dev-env/"},"frontmatter":{"title":"Javascript 開發環境簡介"}},"next":null}}
{"data":{"site":{"siteMetadata":{"title":"網頁小筆記","author":"Shizuku"}},"markdownRemark":{"id":"94a92317-7c58-523c-9c66-1f6ff30bf740","excerpt":"Git 就是 Coding 界的時光機、抓戰犯利器。 概念介紹 Git 的主要功能就是紀錄專案的 版本 ，假設一開始寫完的程式碼是第一版，之後每次修改時就可以更新版本，版本間可也以自由切換。 開始前請先安裝  Git 。 前置動作 先建立一個新的專案資料夾，假設叫做  \n 進入資料夾 後開啟 Terminal…","html":"<blockquote>\n<p>Git 就是 Coding 界的時光機、抓戰犯利器。</p>\n</blockquote>\n<h2>概念介紹</h2>\n<p>Git 的主要功能就是紀錄專案的<strong>版本</strong>，假設一開始寫完的程式碼是第一版，之後每次修改時就可以更新版本，版本間可也以自由切換。</p>\n<p>開始前請先安裝 <a href=\"https://git-scm.com/downloads\">Git</a>。</p>\n<h2>前置動作</h2>\n<p>先建立一個新的專案資料夾，假設叫做 <code class=\"language-text\">learn-git</code>\n<strong>進入資料夾</strong>後開啟 Terminal 並輸入 <code class=\"language-text\">git init</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> learn-git          <span class=\"token comment\"># 建立資料夾</span>\n$ <span class=\"token function\">cd</span> learn-git             <span class=\"token comment\"># 進入資料夾</span>\n$ <span class=\"token function\">git</span> init                 <span class=\"token comment\"># 對這個資料夾開始版控</span>\nInitialized empty Git repository <span class=\"token keyword\">in</span> <span class=\"token punctuation\">..</span>./learn-git/.git/</code></pre></div>\n<p>此時專案中多了一個隱藏資料夾 <code class=\"language-text\">.git</code> ，它就是 git 版本資訊儲存的地方，接下來先隨便新增一個檔案叫 <code class=\"language-text\">a.txt</code>，並在裡頭隨意輸入一些文字。</p>\n<p>回到 Terminal 並輸入萬用指令 <code class=\"language-text\">git status</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> status\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add &lt;file>...\"</span> to include <span class=\"token keyword\">in</span> what will be committed<span class=\"token punctuation\">)</span>\n\n        a.txt\n\nnothing added to commit but untracked files present <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add\"</span> to track<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Terminal 會出現一些文字，代表當前的 Git 狀態以及提示，不確定要輸入什麼指令時就可以試試看 <code class=\"language-text\">git status</code>，可以解決大部分的問題。</p>\n<h2>版控開始</h2>\n<ul>\n<li>\n<p>git add 追蹤檔案</p>\n<p>從 <code class=\"language-text\">git status</code> 的提示中得知 <code class=\"language-text\">a.txt</code> 這個檔案尚未被追蹤，<code class=\"language-text\">git add &lt;file&gt;...</code> 指令能將檔案的變動加入暫存區，沒有被加入的檔案變動就不會被存入新版本。</p>\n</li>\n</ul>\n<p>輸入 <code class=\"language-text\">git add a.txt</code> 還有 <code class=\"language-text\">git status</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> add a.txt\n$ <span class=\"token function\">git</span> status\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git rm --cached &lt;file>...\"</span> to unstage<span class=\"token punctuation\">)</span>\n\n        new file:   a.txt</code></pre></div>\n<p>翻成中文就是：暫存區有變動待確認，而且可以輸入<code class=\"language-text\">git rm --cached a.txt</code> 把上次 <code class=\"language-text\">a.txt</code> 的變動從暫存區移除。</p>\n<ul>\n<li>\n<p>git commit 儲存變動（改版）</p>\n<p>用 commit 來確認並儲存變動，也就是更新專案版本，存檔的同時要附上一個訊息，以便之後辨識版本資訊。</p>\n<p>輸入 <code class=\"language-text\">git commit -m &quot;&lt;你的改版訊息&gt;&quot;</code>，<code class=\"language-text\">-m</code> 是 message 的縮寫</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> commit -m <span class=\"token string\">\"新增 a.txt\"</span>\n<span class=\"token punctuation\">[</span>master <span class=\"token punctuation\">(</span>root-commit<span class=\"token punctuation\">)</span> 89aecbd<span class=\"token punctuation\">]</span> 新增 a.txt\n 1 <span class=\"token function\">file</span> changed, 1 insertions<span class=\"token punctuation\">(</span>+<span class=\"token punctuation\">)</span>, 0 deletions<span class=\"token punctuation\">(</span>-<span class=\"token punctuation\">)</span>\n create mode 100644 a.txt</code></pre></div>\n<p>翻譯蒟蒻：<br>\n總共 1 個檔案改變了，新增 1 行，刪除 0 行<br>\n建立 a.txt 檔案</p>\n<p>再輸入一次 <code class=\"language-text\">git status</code> 就會提示沒東西待確認，很乾淨</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> status\nOn branch master\nnothing to commit, working tree clean</code></pre></div>\n<p>注意：經過改動並輸入 <code class=\"language-text\">git add</code> 後，若再繼續改動的話就要再輸入一次 <code class=\"language-text\">git add</code> 把最新一次的改動也放入暫存區， <code class=\"language-text\">git commit</code> 只會把暫存區的內容加入新版本。</p>\n<h2>本地和遠端 Repository</h2>\n<p>Repository 就是掌管程式碼以及版本資訊的倉庫，但真的很難翻，之後就直接叫 repo。</p>\n<p>目前為止的步驟都是在本地進行，也就是改變本地 repo 的版本，但雲端也可以存放 repo，在合作、複製他人程式碼、換電腦的時候就很方便。</p>\n<p>目前最大的雲端 repo 儲存空間就是 <a href=\"https://github.com/\">Github</a> ，趕緊建立帳號吧。</p>\n<h3>建立 repo</h3>\n<p>註冊完帳號後找到 <code class=\"language-text\">New repository</code> 的選項，隨意取個名字如 <code class=\"language-text\">first-repo</code>，然後按最下面的 Create repository。</p>\n<p>當你想要創建一個全新的 repo 且還沒有任何程式碼的時候，就使用上方區塊的指令，前五行就是剛剛做的事情，最下方的兩行就是當你已經寫了一些東西，想要放入遠端 repo 的指令：</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">echo</span> <span class=\"token string\">\"# first-repo\"</span> <span class=\"token operator\">>></span> README.md     <span class=\"token comment\"># 建立一個新檔案並寫入 # first-repo</span>\n<span class=\"token function\">git</span> init                             <span class=\"token comment\"># 開始版本控制</span>\n<span class=\"token function\">git</span> add README.md                    <span class=\"token comment\"># 將變動放入暫存區</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"first commit\"</span>         <span class=\"token comment\"># 確認改動並更新本地 repo 的版本</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token function\">git</span> remote add origin git@github.com:<span class=\"token operator\">&lt;</span>你的帳號<span class=\"token operator\">></span>/first-repo.git</span><span class=\"gatsby-highlight-code-line\"><span class=\"token function\">git</span> push -u origin master</span></code></pre></div>\n<h3>git remote</h3>\n<p>透過 <code class=\"language-text\">git remote</code> 可以在本地 repo 管理遠端 repo 地址，如果想要把本地 repo 同步到遠端 repo，首先要用 <code class=\"language-text\">git remote add</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> remote add <span class=\"token operator\">&lt;</span>remote 名稱<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>repo 地址<span class=\"token operator\">></span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">remote 名稱</code> 通常設定為 origin，因為通常只會有一個遠端 repo 地址，若有多個就另外再取其他名稱。</li>\n<li><code class=\"language-text\">repo 地址</code> 是遠端 repo 的地址，透過這個地址就能夠在網路上找到 repo，把本地 repo 的程式碼同步上去。</li>\n</ul>\n<h3>git push</h3>\n<p><code class=\"language-text\">git push</code> 將本地 repo 的版本同步到遠端 repo，這時候用到的 <code class=\"language-text\">remote 名稱</code> 就是剛才新增遠端 repo 地址時幫他取的名字，才不用每次都輸入超長的 <code class=\"language-text\">repository url</code>。</p>\n<p>repo 可以擁有許多分支 <a href=\"https://git-scm.com/book/zh-tw/v1/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%A2%9E%E8%88%87%E5%90%88%E4%BD%B5\">branch</a>，<code class=\"language-text\">分支名稱</code> 則是 repo 的分支名稱，預設的名稱就是 master，push 的時候會把本地的 master 分支更新到遠端的 master 分支。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> <span class=\"token function\">git</span> push <span class=\"token operator\">&lt;</span>遠端名稱<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>分支名稱<span class=\"token operator\">></span></code></pre></div>\n<p>輸入完這兩個指令再重整一次剛才創建完 repo 的頁面就能看到程式碼了。</p>\n<h3>git pull</h3>\n<p>和其他人協作一個 repo 時，若 A 在本地 repo commit 了一個新版本並 push 到遠端 repo，B 可以用 pull 將新版本同步到 B 的本地repo：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> pull <span class=\"token operator\">&lt;</span>remote name<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>branch name<span class=\"token operator\">></span></code></pre></div>\n<h2>Git reset 回溯</h2>\n<p><code class=\"language-text\">git reset</code> 可以回溯版本，在介紹如何使用之前要先了解版本的表示方式，先輸入 <code class=\"language-text\">git log --oneline</code> 試試：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> log --oneline\nf279135 <span class=\"token punctuation\">(</span>HEAD -<span class=\"token operator\">></span> master<span class=\"token punctuation\">)</span> update: intro\n6bc08b5 add: ga\nde80577 new: React 快速上手\n379acfa feat: code highlight\n8aafcb9 new: JS開發環境簡介\n0a9c979 feat: difficulty tag</code></pre></div>\n<p>最左邊的七個英數字代表簡化的版本編號（如果不加 oneline 就會看到完整的），右邊就是各版本的 commit 訊息。</p>\n<p><code class=\"language-text\">HEAD</code> 是當前最新的版本，可以用以下方法表示其他版本：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> reset HEAD^     <span class=\"token comment\"># 前一版</span>\n$ <span class=\"token function\">git</span> reset HEAD^^^   <span class=\"token comment\"># 前三版</span>\n$ <span class=\"token function\">git</span> reset HEAD~5    <span class=\"token comment\"># 前五版</span>\n\n$ <span class=\"token function\">git</span> reset 0a9c979   <span class=\"token comment\"># 直接到版本號 0a9c979 </span></code></pre></div>\n<h3>git reset 參數</h3>\n<p>主要有 <code class=\"language-text\">--mixed</code>、<code class=\"language-text\">--soft</code>、<code class=\"language-text\">--hard</code> 三種</p>\n<ul>\n<li>\n<p><code class=\"language-text\">--mixed</code> 不會影響目前的程式碼，也是預設的參數，移動到指定的版本並清空暫存區。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> reset HEAD^\nUnstaged changes after reset:\n<span class=\"token comment\"># 從暫存區移除的檔案資訊...</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">--soft</code> 不會影響目前的程式碼，移動到指定版本，把之前 commit 過的變動都放進暫存區。</p>\n</li>\n<li>\n<p><code class=\"language-text\">--hard</code> 程式碼直接變成指定版本的樣子，謹慎服用。</p>\n</li>\n</ul>\n<h2>其他好用指令</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">git stash</code> 可以回復到版本初始的樣子並把所有改動儲存起來，注意當前程式碼會改變：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> stash       <span class=\"token comment\"># 回到版本初始狀態 </span>\n$ <span class=\"token function\">git</span> stash pop   <span class=\"token comment\"># 復原 stash 的程式碼</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">git diff</code> 可以用來比較兩個本版的區別</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> <span class=\"token function\">diff</span> <span class=\"token operator\">&lt;</span>版本1<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>版本2<span class=\"token operator\">></span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">git log</code> 可以查看 git 的歷史以及版本號（按 q 退出）</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> log\n$ <span class=\"token function\">git</span> log --oneline</code></pre></div>\n<ul>\n<li>\n<p><code class=\"language-text\">git checkout</code> 回復單一檔案至指定版本：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> checkout <span class=\"token operator\">&lt;</span>版本<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>檔案名稱<span class=\"token operator\">></span></code></pre></div>\n</li>\n</ul>","frontmatter":{"title":"Git 版本控制","date":"March 14, 2019","description":"還在用截圖、USB 傳程式碼嗎？別鬧了","difficulty":"入門"}}},"pageContext":{"slug":"/git/","previous":{"fields":{"slug":"/react/"},"frontmatter":{"title":"React 快速上手"}},"next":null}}